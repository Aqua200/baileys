import { Boom } from '@hapi/boom';
import NodeCache from '@cacheable/node-cache';
import readline from 'readline';
import makeWASocket, {
    delay,
    proto,
    AnyMessageContent,
    DisconnectReason,
    fetchLatestBaileysVersion,
    getAggregateVotesInPollMessage,
    makeCacheableSignalKeyStore,
    makeInMemoryStore,
    PHONENUMBER_MCC,
    useMultiFileAuthState,
    WAMessageContent,
    WAMessageKey,
    WAMessageStubType,
    Browsers,
    getContentType,
    jidNormalizedUser
} from '../src'; // Mantengo '../src' basándome en tus archivos subidos.

import MAIN_LOGGER from '../src/Utils/logger'; // Mantengo '../src' basándose en tus archivos subidos.
import open from 'open';
import fs from 'fs';
import { format } from "util";
import libphonenumberJs from 'libphonenumber-js';
import 'dotenv/config'; // Importa dotenv para cargar variables de entorno

const logger = MAIN_LOGGER.child({});

// Rutas de almacenamiento configurables mediante variables de entorno
// Si no se definen las variables de entorno, se usan las rutas por defecto.
const STORE_FILE_PATH = process.env.STORE_PATH || './baileys_store_multi.json';
const AUTH_INFO_PATH = process.env.AUTH_PATH || 'baileys_auth_info';
const STORE_SAVE_INTERVAL = 10_000;

const prefix = new RegExp('^([' + ('‎/!#$%+£¢€¥^°=¶∆×÷π√✓©®:;?&.\\-').replace(/[|\\{}()[\]^$+*?.\-\^]/g, '\\$&') + '])');

const useStore = !process.argv.includes('--no-store');
const doReplies = !process.argv.includes('--no-reply');
const usePairingCode = process.argv.includes('--use-pairing-code');
const useMobile = process.argv.includes('----mobile');

const msgRetryCounterCache = new NodeCache();

const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const question = (text: string) => new Promise<string>((resolve) => rl.question(text, resolve));

const store = useStore ? makeInMemoryStore({ logger }) : undefined;
store?.readFromFile(STORE_FILE_PATH);
setInterval(() => {
    store?.writeToFile(STORE_FILE_PATH);
}, 10_000);

function patchMessageBeforeSending(msg: proto.IMessage, jid: string[]): Promise<proto.IMessage> | proto.IMessage {
    if (msg?.deviceSentMessage?.message?.listMessage) {
        logger.debug("ListType in deviceSentMessage is patched:", msg.deviceSentMessage.message.listMessage.listType);
    }
    
    if (msg?.listMessage) {
        logger.debug("ListType in listMessage is patched:", msg.listMessage.listType);
    }
    
    const requiresPatch = !!(msg.buttonsMessage || msg.templateMessage || msg.listMessage);
    if (requiresPatch) {
        msg = {
            viewOnceMessage: {
                message: {
                    messageContextInfo: {
                        deviceListMetadata: {},
                        deviceListMetadataVersion: 2
                    },
                    ...msg
                }
            }
        };
    }
    
    logger.debug(JSON.stringify(msg, null, 2));
    return msg;
}

const handleConnectionUpdate = async (update: Partial<import('../src').ConnectionState>, startSockFunc: () => Promise<void>) => {
    const { connection, lastDisconnect } = update;
    const code = (lastDisconnect?.error as Boom)?.output?.statusCode || (lastDisconnect?.error as Boom)?.output?.payload?.statusCode;

    if (code) {
        logger.info(`Código de desconexión: ${code}, Razón: ${DisconnectReason[code]}`);
    }

    if (connection === 'close') {
        if (code !== DisconnectReason.loggedOut) {
            logger.info('Conexión cerrada. Intentando reconectar...');
            await startSockFunc();
        } else {
            logger.info('Conexión cerrada. Has cerrado sesión.');
        }
    }

    logger.info('Actualización de conexión:', update);
};

const handleCredsUpdate = async (saveCredsFunc: () => Promise<void>) => {
    await saveCredsFunc();
    logger.debug('Credenciales actualizadas y guardadas.');
};

const handleCallEvents = (calls: any) => {
    logger.info('Evento de llamada recibido:', calls);
};

const handleMessagesUpdate = async (updates: proto.IWebMessageInfo[], getMessageFunc: (key: WAMessageKey) => Promise<WAMessageContent | undefined>) => {
    for (const { key, update } of updates) {
        if (update.pollUpdates) {
            logger.info('Actualización de encuesta recibida.');
            const pollCreation = await getMessageFunc(key);
            if (pollCreation) {
                logger.info(
                    'Resultados de la encuesta agregados:',
                    getAggregateVotesInPollMessage({
                        message: pollCreation,
                        pollUpdates: update.pollUpdates,
                    })
                );
            }
        }
    }
};

const handleMessagesUpsert = async (upsert: { messages: proto.IWebMessageInfo[]; type: import('../src').MessageUpsertType }, sock: ReturnType<typeof makeWASocket>, replyFunc: (jid: string, msg: AnyMessageContent, options: object) => Promise<void>) => {
    for (const m_raw of upsert.messages) {
        let m = proto.WebMessageInfo.fromObject(m_raw);

        const senderKeyDistributionMessage = m.message?.senderKeyDistributionMessage?.groupId;
        const chat = jidNormalizedUser(m.key?.remoteJid || (senderKeyDistributionMessage !== "status@broadcast" && senderKeyDistributionMessage) || '');
        
        const mtype = getContentType(m.message || {}) || (m.message && Object.keys(m.message)[0]) || '';
        
        const msgContent = m.message ? (/viewOnceMessage/.test(mtype) ? (m.message[Object.keys(m.message)[0]] as WAMessageContent) : (m.message[mtype] as WAMessageContent)) : null;
        
        const body = typeof msgContent === "string" ? msgContent : (msgContent && 'text' in msgContent && msgContent.text) ? msgContent.text : (msgContent && 'caption' in msgContent && msgContent.caption) ? msgContent.caption : (msgContent && 'contentText' in msgContent && msgContent.contentText) ? msgContent.contentText : '';

        if (m.messageStubType) {
            logger.info({
                messageStubType: WAMessageStubType[m.messageStubType],
                messageStubParameters: m.messageStubParameters,
                participant: m.participant
            });
        }

        const customPrefix = /^×?> /;
        const match = (customPrefix.test(body) ? [[customPrefix.exec(body), customPrefix]].find(p => p[1]) : [[prefix.exec(body), prefix]].find(p => p[1])) || '';
        const usedPrefix = (match[0] || match[1] || '')[0] || '';
        const noPrefix = body.replace(usedPrefix, '');
        
        let [command, ...args] = noPrefix.trim().split` `.filter(v => v);
        args = args || [];
        let _args = noPrefix.trim().split` `.slice(1);
        let text = _args.join` `;
        command = (command || '').toLowerCase();

        if (!usedPrefix) {
            logger.debug(`Mensaje sin prefijo de comando: ${body}`);
            return;
        }

        logger.info(`[Mensaje]: ${m.pushName} > ${usedPrefix + command}`);

        switch (command) {
            case 'list':
                await sock.sendMessage(chat, {
                    text: '¡Hola Mundo!',
                    footer: 'Pie de página de ejemplo',
                    buttonText: "SELECCIONA UNA OPCIÓN",
                    sections: [{
                        title: "Sección Principal",
                        rows: [
                            { title: "Ping", rowId: usedPrefix + "ping" },
                            { title: "Menú", rowId: usedPrefix + "menu" },
                            { title: "Crear Encuesta", rowId: usedPrefix + "crear_encuesta Ejemplo de Pregunta|Opción A|Opción B" },
                            { title: "Enviar Imagen", rowId: usedPrefix + "sendimage" } // Nuevo comando
                        ]
                    }]
                }, { quoted: m });
                break;

            case 'ping':
                await replyFunc(chat, { text: '¡Pong!' }, { quoted: m });
                break;

            case 'crear_encuesta':
                const parts = text.split('|').map(p => p.trim());
                if (parts.length < 2) {
                    await replyFunc(chat, { text: 'Formato incorrecto. Uso: `!crear_encuesta Pregunta?|Opcion1|Opcion2`' }, { quoted: m });
                    return;
                }
                const pollQuestion = parts[0];
                const pollOptions = parts.slice(1).map(option => ({ optionName: option }));

                try {
                    await sock.sendMessage(chat, {
                        pollMessage: {
                            name: pollQuestion,
                            options: pollOptions,
                            selectableOptionsCount: 1
                        }
                    }, { quoted: m });
                    logger.info(`Encuesta enviada: "${pollQuestion}"`);
                } catch (error) {
                    logger.error('Error al enviar la encuesta:', error);
                    await replyFunc(chat, { text: 'Hubo un error al crear la encuesta.' }, { quoted: m });
                }
                break;
            
            case 'sendimage': // Nuevo comando para enviar una imagen
                const imagePath = './sample_image.jpg'; // Reemplaza con la ruta de tu imagen
                if (fs.existsSync(imagePath)) {
                    await sock.sendMessage(chat, {
                        image: { url: imagePath },
                        caption: 'Aquí tienes una imagen de ejemplo.'
                    }, { quoted: m });
                    logger.info(`Imagen enviada desde: ${imagePath}`);
                } else {
                    await replyFunc(chat, { text: `Error: No se encontró la imagen en la ruta: ${imagePath}. Asegúrate de tener un archivo 'sample_image.jpg' en la misma carpeta que 'example.ts'.` }, { quoted: m });
                }
                break;

            case 'menu':
                await replyFunc(chat, { text: 'Comandos disponibles:\n`!ping` - Responde con Pong.\n`!list` - Muestra un menú de opciones.\n`!crear_encuesta Pregunta?|Opcion1|Opcion2` - Crea una nueva encuesta.\n`!sendimage` - Envía una imagen de ejemplo.' }, { quoted: m });
                break;

            default:
                // ADVERTENCIA DE SEGURIDAD:
                // La siguiente sección permite la ejecución de código JavaScript arbitrario.
                // Esto representa un riesgo de seguridad MUY ALTO en entornos de producción.
                // Se recomienda ENCARECIDAMENTE eliminar o restringir esta funcionalidad
                // solo a entornos de desarrollo o usuarios de MUCHA confianza.
                if (customPrefix.test(body)) {
                    let i = 15;
                    let _return;
                    let _text = (/^(×>)/.test(usedPrefix) ? 'return ' : '') + noPrefix;
                    try {
                        // @ts-ignore
                        let exec = new (async () => { }).constructor('print', 'm', 'sock', 'chat', 'process', 'args', 'require', _text);
                        _return = await exec.call(sock, (...args: any[]) => {
                            if (--i < 1) {
                                logger.warn('Límite de llamadas a "print" alcanzado.');
                                return;
                            }
                            return replyFunc(chat, { text: format(...args) }, { quoted: m });
                        }, m, sock, chat, process, args, require);
                    } catch (e) {
                        _return = e;
                    } finally {
                        await sock.sendMessage(chat, { text: format(_return) }, { quoted: m });
                    }
                } else {
                    logger.debug(`Comando desconocido: ${command}`);
                }
        }
    }
};

const startSock = async () => {
    try {
        const { state, saveCreds } = await useMultiFileAuthState(AUTH_INFO_PATH);
        
        const { version, isLatest } = await fetchLatestBaileysVersion();
        logger.info(`Usando WA v${version.join('.')}, ¿Es la última versión?: ${isLatest}`);
        
        const browser = Browsers.macOS("Safari");
        
        const sock = makeWASocket({
            version,
            logger,
            browser,
            printQRInTerminal: !usePairingCode,
            mobile: useMobile,
            auth: {
                creds: state.creds,
                keys: makeCacheableSignalKeyStore(state.keys, logger),
            },
            syncFullHistory: false,
            msgRetryCounterCache,
            generateHighQualityLinkPreview: true,
            getMessage,
            patchMessageBeforeSending
        });

        store?.bind(sock.ev);

        if (usePairingCode && !sock.authState.creds.registered) {
            if (useMobile) {
                throw new Error('Cannot use pairing code with mobile api.');
            }
            
            let phoneNumber = '';
            while (!/^\d+$/.test(phoneNumber)) {
                phoneNumber = await question('Please enter your mobile phone number (digits only):\n');
                if (!/^\d+$/.test(phoneNumber)) {
                    logger.warn('Invalid phone number. Please enter digits only.');
                }
            }
            
            const code = await sock.requestPairingCode(phoneNumber);
            logger.info(`Pairing code for '${phoneNumber}': ${code?.match(/.{1,4}/g)?.join('-') || code}`);
        }

        if(useMobile && !sock.authState.creds.registered) {
            const { registration } = sock.authState.creds || { registration: {} }

            if(!registration.phoneNumber) {
                registration.phoneNumber = await question('Please enter your mobile phone number:\n')
            }

            const phoneNumber = libphonenumberJs.parsePhoneNumber(registration!.phoneNumber)
            if(!phoneNumber?.isValid()) {
                throw new Error('Invalid phone number: ' + registration!.phoneNumber)
            }

            registration.phoneNumber = phoneNumber.format('E.164')
            registration.phoneNumberCountryCode = phoneNumber.countryCallingCode
            registration.phoneNumberNationalNumber = phoneNumber.nationalNumber
            const mcc = PHONENUMBER_MCC[phoneNumber.countryCallingCode]
            if(!mcc) {
                throw new Error('Could not find MCC for phone number: ' + registration!.phoneNumber + '\nPlease specify the MCC manually.')
            }

            registration.phoneNumberMobileCountryCode = mcc

            async function enterCode() {
                try {
                    const code = await question('Please enter the one time code:\n')
                    const response = await sock.register(code.replace(/["']/g, '').trim().toLowerCase())
                    logger.info('Successfully registered phone number.')
                    logger.info(response)
                    rl.close()
                } catch(error) {
                    logger.error('Failed to register your phone number. Please try again.\n', error)
                    await askForOTP()
                }
            }

            async function enterCaptcha() {
                const response = await sock.requestRegistrationCode({ ...registration, method: 'captcha' })
                const path = __dirname + '/captcha.png'
                fs.writeFileSync(path, Buffer.from(response.image_blob!, 'base64'))

                open(path)
                const code = await question('Please enter the captcha code:\n')
                fs.unlinkSync(path)
                registration.captcha = code.replace(/["']/g, '').trim().toLowerCase()
            }

            async function askForOTP() {
                if (!registration.method) {
                    await delay(2000)
                    let code = await question('How would you like to receive the one time code for registration? "sms" or "voice"\n')
                    code = code.replace(/["']/g, '').trim().toLowerCase()
                    if(code !== 'sms' && code !== 'voice') {
                        return await askForOTP()
                    }

                    registration.method = code
                }

                try {
                    await sock.requestRegistrationCode(registration)
                    await enterCode()
                } catch(error) {
                    logger.error('Failed to request registration code. Please try again.\n', error)

                    if(error?.reason === 'code_checkpoint') {
                        await enterCaptcha()
                    }

                    await askForOTP()
                }
            }

            askForOTP()
        }


        const reply = async (jid: string, msg: AnyMessageContent, options: object) => {
            await sock.presenceSubscribe(jid);
            await delay(500);
            
            await sock.sendPresenceUpdate('composing', jid);
            await delay(2000);
            
            await sock.sendPresenceUpdate('paused', jid);
            
            await sock.sendMessage(jid, msg, options);
        };

        sock.ev.process(
            async (events) => {
                if (events['connection.update']) {
                    await handleConnectionUpdate(events['connection.update'], startSock);
                }
                if (events['creds.update']) {
                    await handleCredsUpdate(saveCreds);
                }
                if (events.call) {
                    handleCallEvents(events.call);
                }
                if (events['messages.update']) {
                    await handleMessagesUpdate(events['messages.update'], getMessage);
                }
                if (events['messages.upsert']) {
                    await handleMessagesUpsert(events['messages.upsert'], sock, reply);
                }
                if(events['labels.association']) {
                    logger.info('Labels association:', events['labels.association'])
                }
                if(events['labels.edit']) {
                    logger.info('Labels edit:', events['labels.edit'])
                }
                if(events['messaging-history.set']) {
                    const { chats, contacts, messages, isLatest } = events['messaging-history.set']
                    logger.info(`Received ${chats.length} chats, ${contacts.length} contacts, ${messages.length} msgs (is latest: ${isLatest})`)
                }
                if(events['message-receipt.update']) {
                    logger.info('Message receipt update:', events['message-receipt.update'])
                }
                if(events['messages.reaction']) {
                    logger.info('Message reaction:', events['messages.reaction'])
                }
                if(events['presence.update']) {
                    logger.info('Presence update:', events['presence.update'])
                }
                if(events['chats.update']) {
                    logger.info('Chats update:', events['chats.update'])
                }
                if(events['contacts.update']) {
                    for(const contact of events['contacts.update']) {
                        if(typeof contact.imgUrl !== 'undefined') {
                            const newUrl = contact.imgUrl === null
                                ? null
                                : await sock!.profilePictureUrl(contact.id!).catch(() => null)
                            logger.info(
                                `Contact ${contact.id} has a new profile pic: ${newUrl}`,
                            )
                        }
                    }
                }
                if(events['chats.delete']) {
                    logger.info('Chats deleted:', events['chats.delete'])
                }
            }
        );

        return sock;

    } catch (error) {
        logger.error('Fatal error starting socket:', error);
